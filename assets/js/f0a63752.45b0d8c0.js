"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[659],{15718:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Noise2D object. If no seed is provided, a random seed will be\\ngenerated using the module\'s internal Random object.","params":[{"name":"seed","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"Noise2D\\r\\n"}],"function_type":"static","source":{"line":28,"path":"src/init.luau"}},{"name":"Noise","desc":"Returns a noise value between -scale and scale. This is the same as math.noise() except\\nthat the seed is fed into the first argument, and the scale is applied to the result.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"scale","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":38,"path":"src/init.luau"}},{"name":"UnitNoise","desc":"Returns a noise value between 0 and scale. This is the same as Noise2D:Noise() except\\nthat the result is shifted and scaled to be between 0 and scale.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"scale","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"number\\r\\n"}],"function_type":"method","source":{"line":46,"path":"src/init.luau"}},{"name":"Range","desc":"Returns true if the noise value is between -range and range. This is the same as\\nNoise2D:Noise() except that the result is checked to be within the range.\\n\\nThis range is from the center of the distribution, going outwards as you increase range.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"scale","desc":"","lua_type":"number"},{"name":"range","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":57,"path":"src/init.luau"}},{"name":"EdgeRange","desc":"Returns true if the unit noise value is between 0 and range. This is the same as\\nNoise2D:UnitNoise() except that the result is checked to be within the range.\\n\\nThis range is from the edge of the distribution, going towards the right as you increase range.","params":[{"name":"x","desc":"","lua_type":"number"},{"name":"y","desc":"","lua_type":"number"},{"name":"scale","desc":"","lua_type":"number"},{"name":"range","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"method","source":{"line":68,"path":"src/init.luau"}}],"properties":[],"types":[],"name":"Noise2D","desc":"A 2D noise object that can be used to generate noise. It is designed to be stateful, and \\ndesigned to feel similar in usage to Roblox\'s built in Random object.\\n\\nIt uses math.noise() under the hood, and feeds the seed into the first argument.","source":{"line":9,"path":"src/init.luau"}}')}}]);